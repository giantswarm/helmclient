e2eTest: &e2eTest
    machine: true
    working_directory: /home/circleci/.go_workspace/src/github.com/giantswarm/helmclient
    steps:
    - checkout

    - attach_workspace:
        at: .

    - run:
        name: Get e2ectl binary
        command: |
          wget -q $(curl -sS https://api.github.com/repos/giantswarm/e2ectl/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
          chmod +x ./e2ectl

    - run:
        name: Get kubectl binary
        command: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl

    - run:
        name: Get helm binary
        command: |
          curl -L https://get.helm.sh/helm-v2.16.0-linux-amd64.tar.gz | tar xvz --strip-components 1 linux-amd64/helm
          chmod +x helm

    - run:
        name: Init cluster
        command: |
          ./e2ectl cluster create
          cp $(./e2ectl kubeconfig path) ${E2E_TEST_DIR}/kubeconfig
          if [ -n "$HELM_INIT" ]
          then
            export KUBECONFIG=$(./e2ectl kubeconfig path)
            ./kubectl create ns giantswarm
            ./helm init --tiller-namespace giantswarm --tiller-image quay.io/giantswarm/tiller:v2.16.0 --wait
          fi

    - run:
        name: Run test
        command: |
          docker run --rm --network host \
            -v $(pwd)/${E2E_TEST_DIR}:/e2e \
            -v $(pwd):/go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} \
            -e E2E_KUBECONFIG=/e2e/kubeconfig \
            -e CIRCLE_SHA1=${CIRCLE_SHA1} \
            -w /go/src/github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} \
            golang:1 go test -v -tags k8srequired ./${E2E_TEST_DIR}/

    - run:
        name: Export logs
        command: |
          ./e2ectl logs export --logs-dir=kind/logs
        when: always

    - store_artifacts:
        path: kind/logs
        destination: logs

    - run:
        name: Finish with cleanup, no matter if the test succeeded or not
        command: ./e2ectl cluster delete
        when: always

orbs:
  integration-test:
    executors:
      machine-executor:
        machine: true
    commands:
      install-go:
        steps:

# --- Installing Go: start
          # TODO Skip steps till `save_cache` if cache is restored and we have proper version of Go installed.
          #- restore_cache:
          #    keys:
          #      - machine-executor-go-1-13-4
          - run:
              name: "Remove old Go"
              command: |
                sudo rm -rf /usr/local/go
          - run:
              name: "Download Go"
              command: |
                wget https://dl.google.com/go/go1.13.4.linux-amd64.tar.gz
          - run:
              name: "Check downloaded Go checksum"
              command: |
                [[ "$(sha256sum go1.13.4.linux-amd64.tar.gz | cut -d ' ' -f 1)" == "692d17071736f74be04a72a06dab9cac1cd759377bd85316e52b2227604c004c" ]]
          - run:
              name: "Install Go"
              command: |
                sudo tar -C /usr/local -xzf go1.13.4.linux-amd64.tar.gz
          - run:
              name: "Remove downloaded Go files"
              command: |
                rm go1.13.4.linux-amd64.tar.gz
          #- save_cache:
          #    key: machine-executor-go-1-13-4
          #    paths:
          #      - "/usr/local/go"

          #- run: 
          #    name: "Configure GOPATH environment variable"
          #    command: |
          #      echo 'export GOPATH=/opt/go' >> $BASH_ENV
          #- run: 
          #    name: "Configure PATH environment variable"
          #    command: |
          #      echo 'export PATH=$GOPATH/bin:/opt/go/bin:$PATH' >> $BASH_ENV
          - run: 
              name: "Check Go version"
              command: |
                go version
          - run: ls -la .
# --- Installing Go: end



version: 2.1
jobs:
  build:
    executor: machine-executor
    steps:
    - install-go
    - checkout

    - run: |
        wget -q $(curl -sS -H "Authorization: token $RELEASE_TOKEN" https://api.github.com/repos/giantswarm/architect/releases/latest | grep browser_download_url | head -n 1 | cut -d '"' -f 4)
        chmod +x ./architect
        ./architect version

    - run: ./architect build

    - store_test_results:
        path: /tmp/results

    - deploy:
        command: |
          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            ./architect deploy
          fi



  e2eTestBasic:
    environment:
      E2E_TEST_DIR: "integration/test/basic"
    <<: *e2eTest

# Disable integration tests. They will be re-enabled as Helm 3 logic is added.
#
#  e2eTestInstallRelease:
#    environment:
#      E2E_TEST_DIR: "integration/test/installrelease"
#    <<: *e2eTest

#  e2eTestDeleteRelease:
#    environment:
#      E2E_TEST_DIR: "integration/test/deleterelease"
#    <<: *e2eTest



workflows:
  version: 2
  build_e2e:
    jobs:
      - build
      - e2eTestBasic:
          requires:
          - build

# Disable integration tests. They will be re-enabled as Helm 3 logic is added.
#
#      - e2eTestInstallRelease:
#          requires:
#          - build
#      - e2eTestDeleteRelease:
#          requires:
#         - build
